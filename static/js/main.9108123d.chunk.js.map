{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onDoneClick","state","success","rating","database","ref","concat","auth","currentUser","uid","set","then","push","parere","input","setState","showGraph","showContent","sentRating","loading","_this2","signInAnonymously","on","snapshot","val","nota","nr","_","map","n","_this3","react_default","a","createElement","className","LazyLoad_default","height","offsetVertical","src","build_default","starRatedColor","changeRating","starDimension","numberOfStars","TextField_default","style","width","id","label","placeholder","margin","onChange","event","target","value","index_es","color","onClick","fontWeight","toFixed","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9108123d.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport _ from 'lodash';\r\nimport StarRatings from 'react-star-ratings'\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Button } from '../node_modules/@material-ui/core';\r\nimport firebase from 'firebase'\r\nimport LazyLoad from 'react-lazy-load';\r\n\r\n\r\nimport './App.css';\r\nvar config = {\r\n  apiKey: \"AIzaSyARKv3IusgBPVRPeWeio2x3zvgKCVww2Is\",\r\n  authDomain: \"parereatelespectatorilor.firebaseapp.com\",\r\n  databaseURL: \"https://parereatelespectatorilor.firebaseio.com\",\r\n  projectId: \"parereatelespectatorilor\",\r\n  storageBucket: \"parereatelespectatorilor.appspot.com\",\r\n  messagingSenderId: \"537648099285\"\r\n};\r\nfirebase.initializeApp(config);\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      sentRating: 0,\r\n      rating: 0,\r\n      input: '',\r\n      success: false,\r\n      showGraph: false,\r\n      showContent: false,\r\n      loading: true\r\n    }\r\n  }\r\n  componentWillMount() {\r\n    firebase.auth().signInAnonymously()\r\n      .then(() => {\r\n        firebase.database().ref(`/users/${firebase.auth().currentUser.uid}/hasClickedBefore`)\r\n          .on('value', snapshot => {\r\n            if (snapshot.val() === true)\r\n              this.setState({ loading: false, showContent: false })\r\n            else\r\n              this.setState({ loading: false, showContent: true })\r\n          })\r\n      })\r\n      ;\r\n    firebase.database().ref('/votes')\r\n      .on('value', snapshot => {\r\n        let nota = 0;\r\n        let nr = 0;\r\n        _.map(snapshot.val(), (val, uid) => {\r\n          nr++;\r\n          nota = nota + val.rating;\r\n        })\r\n        let n = nota / nr;\r\n        this.setState({ sentRating: n })\r\n      })\r\n  }\r\n  onDoneClick = () => {\r\n    if (this.state.success === false && this.state.rating !== 0)\r\n      firebase.database().ref(`/users/${firebase.auth().currentUser.uid}/hasClickedBefore`)\r\n        .set(true)\r\n        .then(() => firebase.database().ref('/votes/').push({ rating: this.state.rating, parere: this.state.input })\r\n          .then(() => this.setState({ success: true, showGraph: true, showContent: true })))\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        {this.state.loading === true ?\r\n          <LazyLoad height={'100%'} offsetVertical={300}>\r\n            <img src='https://media.giphy.com/media/3oEjI6SIIHBdRxXI40/giphy.gif' />\r\n          </LazyLoad>\r\n          : this.state.showContent === true ?\r\n            <div>\r\n              {this.state.success === false ?\r\n                <div>\r\n                  <h3>Pentru că ținem la părerea telespectatorilor, dorim să ne oferiți o notă!</h3>\r\n                  <StarRatings\r\n                    rating={this.state.rating}\r\n                    starRatedColor=\"blue\"\r\n                    changeRating={rating => {\r\n                      this.setState({ rating: rating })\r\n                      if (rating === 5)\r\n                        this.setState({ input: '' })\r\n                    }}\r\n                    starDimension=\"50px\"\r\n                    numberOfStars={5}\r\n                  /></div> : null}\r\n              {this.state.rating < 5 && this.state.rating !== 0 && this.state.success === false ? <div>\r\n                <h5>Știm ca nu suntem perfecți, dar dorim sa știm ce ar trebui sa facem ca sa devenim mai buni!</h5>\r\n                <TextField\r\n                  style={{ width: '90%' }}\r\n                  id=\"with-placeholder\"\r\n                  label=\"Aveți o sugestie? (fără înjurături)\"\r\n                  placeholder=\"Aveti o sugestie? (fără înjurături)\"\r\n                  margin=\"normal\"\r\n                  onChange={(event) => this.setState({ input: event.target.value })}\r\n                /></div> : null}\r\n              {this.state.showGraph === false ?\r\n                <Button style={this.state.success === true ? { color: 'green' } : null} onClick={this.onDoneClick}>{this.state.success === false ? 'Gata' : 'Multumim pentru sprijin'}</Button> : null}\r\n              {\r\n                this.state.showGraph === true ?\r\n                  <div>\r\n                    <h1>Media notelor telespectatorilor este </h1><h1 style={{ fontWeight: 'bold' }}>{this.state.sentRating.toFixed(2)}/5.00</h1>\r\n                    <StarRatings\r\n                      rating={this.state.sentRating}\r\n                      starRatedColor=\"blue\"\r\n                      starDimension=\"50px\"\r\n                      numberOfStars={5}\r\n                    />\r\n                  </div>\r\n                  : null\r\n              }</div> : <div>\r\n              <h3>Stim ca ti-a placut si doresti sa mai votezi odata dar nu permitem asta. In schimb poti viziona media notelor!</h3>\r\n              <h1>Media notelor telespectatorilor este </h1><h1 style={{ fontWeight: 'bold' }}>{this.state.sentRating.toFixed(2)}/5.00</h1>\r\n              <StarRatings\r\n                rating={this.state.sentRating || 0}\r\n                starRatedColor=\"blue\"\r\n                starDimension=\"50px\"\r\n                numberOfStars={5}\r\n              />\r\n            </div>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}